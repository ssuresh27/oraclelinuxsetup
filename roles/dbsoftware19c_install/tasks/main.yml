- name: display pre database software install message
  debug:
    msg:
      - 'Oracle Database Software 19c Installation started for Single Instance at {{ansible_date_time.iso8601}}:'

- name: Ensure free space on disk is more than 20 GB
  assert:
    that: item.size_available > 21474836480
    msg: "warning: disk space is low"
  when: item.mount == '/orabin'
  with_items: "{{ ansible_facts.mounts }}"
  no_log: true

- debug:
    msg: "export CV_ASSUME_DISTID={{ ASSUME_VARS }}"

- debug:
    msg: "checking resource limits"

- name: check file descriptor soft limit
  shell:
    cmd: ulimit -Sn
  register: limits

- name: ---
  fail:
    msg: "warning: file descriptor soft limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 1024

- name: check file descriptor hard limit
  shell:
    cmd: ulimit -Hn
  register: limits

- name: ---
  fail:
    msg: "warning: file descriptor hard limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 65536

- name: check available processes soft limit
  shell:
    cmd: ulimit -Su
  register: limits

- name: ---
  fail:
    msg: "warning: available processes soft limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 2047

- name: check available processes hard limit
  shell:
    cmd: ulimit -Hu
  register: limits

- name: ---
  fail:
    msg: "warning: available processes hard limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 16384

- name: check stack segment soft limit
  shell:
    cmd: ulimit -Ss
  register: limits

- name: ---
  fail:
    msg: "warning: stack segment soft limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 10240 

- name: check stack segment hard limit
  shell:
    cmd: ulimit -Hs
  register: limits

- name: ---
  fail:
    msg: "warning: stack segment hard limit is {{ limits.stdout }}"
  ignore_errors: yes
  when: limits.stdout | int < 10240 or limits.stdout | int > 32768 

- name: create required directories
  file:
    path="{{ item }}"
    state=directory
    owner="{{ oracle_user }}"
    group="{{ oracle_install_group }}"
    mode=0775
  with_items:
    # - "{{ root_directory }}"
    # - "{{ scripts_directory }}"
    # - "{{ oracle_inventory }}"
    # - "{{ oracle_base }}"
    - "{{ stage_dir }}"
    # - "{{ oracle_home }}"
  tags:
   - db19c_createinventory

- name: Unpack Oracle 19c Database Software to the target server
  ansible.builtin.unarchive:
    src: "{{ oracle_gold_image }}"
    dest: "{{ oracle_home }}"
    remote_src: true
    mode: 0750
    group: "{{ oracle_install_group }}"
    owner:  "{{ oracle_user }}"
  tags:
   - db19c_unpackdbsoftware

- name: Setup Oracle 19c Database Software silent response file
  template: src=roles/dbsoftware19c_install/templates/{{ oradbsoft_rsp }}.rsp.j2 dest={{ stage_dir }}/{{ oradbsoft_rsp }}.rsp mode=0755
  tags:
   - db19c_setuprspfile

- name: Install Oracle 19c Database Software
  shell: "export CV_ASSUME_DISTID={{ ASSUME_VARS }}; {{ oracle_home }}/runInstaller -silent -responseFile {{ stage_dir }}/{{ oradbsoft_rsp }}.rsp -noconfig -ignorePrereqFailure"  
  ignore_errors: True
  tags:
   - dbsoft19c_install

- name: Execute orainstroot.sh
  become: true
  become_exe: "sudo su - "
  become_method: su
  shell: "{{ oracle_inventory }}/orainstRoot.sh" 
  ignore_errors: True
  tags:
   - db19c_exeorainstroot

- name: Execute root.sh
  become: true
  become_exe: "sudo su - "
  become_method: su
  shell: "{{ oracle_home }}/root.sh -silent"
  tags:
   - db19c_exeroot

- name: Remove stage directory 
  file: path={{ stage_dir }} state=absent

- name: display post install message
  debug:
    msg:
      - 'This Steps completed below task for Single Instance at {{ansible_date_time.iso8601}}:'
      - '- Install Single Instance Oracle Database Software'
      - 'Next Steps left to do:'
      - '- Create SI empty Container Database on server ora-x1'
      - '- Create SI Pluggable Database on server ora-x1'
      - '- Deinstall Single Instance Oracle Database Software'
      - '- END OF ALL: git clone of OracleDBAwithAnsible repository will be shared'


 
# - name: Print ORACLE HOME list from default var files
#   ansible.builtin.debug:
#     msg:
#       - "ORACLE HOME -> {{ oracle_home }}"
#       - "ORACLE BASE -> {{ oracle_base }}"
#       - "ORACLE BINARY -> {{ oracle_gold_image }}"